package ${servicePackageName}.${moduleName}.service;

import com.baomidou.mybatisplus.extension.service.IService;
import ${pojoPackageName}.${moduleName}.entity.${ClassName};
import ${pojoPackageName}.${moduleName}.model.dto.${ClassName}DTO;
import ${pojoPackageName}.${moduleName}.model.query.${ClassName}Query;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.xiumu.common.core.page.PageQuery;

import java.util.List;

/**
 * service 层 方法命名遵循自解释原则，好的方法名可以直接简单明了的表示该方法的作用
 * 尽量少用 Wrapper 条件构造器，尤其是条件过多的时候，一定要将 sql 写到 xml 中，做到 sql 与代码之间的隔离
 * 简单查询可以使用 Wrapper 条件构造器
 *
 * ${functionName} Service 接口
 *
 * @author ${author}
 * @date ${datetime}
 */
public interface ${ClassName}Service extends IService<${ClassName}> {

    /**
     * 分页查询
     *
     * @param pageQuery 分页条件
     * @return
     */
    IPage<${ClassName}> listPage(PageQuery<${ClassName}Query, ${ClassName}> pageQuery);

    /**
     * 根据条件查询 ${functionName}
     *
     * @param ${className} 查询条件
     * @return
     */
    List<${ClassName}> listBy${ClassName}(${ClassName}Query ${className});

    /**
     * 创建 ${functionName}
     *
     * @param ${className}DTO ${className} 信息
     * @return
     */
    boolean create(${ClassName}DTO ${className}DTO);

    /**
     * 更新 ${functionName}
     *
     * @param ${className}DTO 更新内容
     * @param id 主键 ID
     * @return
     */
    boolean updateById(${ClassName}DTO ${className}DTO, Long id);

    /**
     * 根据 id 逻辑删除
     *
     * @param id id
     * @return
     */
    boolean deleteById(Long id);
}
